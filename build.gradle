plugins {
    id 'org.hidetake.ssh' version '1.1.3'
}

if(env == 'local'){
    ext.envProp = 'local.properties'
    ext.softwarePath = rootProject.projectDir.absolutePath + '/deploy'
} else if (env == 'windows'){
    ext.envProp = 'windows.properties'
    ext.softwarePath = rootProject.projectDir.absolutePath + '/deploy'
} else if(env == 'wits'){
    apply from: 'deploy.gradle'
    ext.envProp = 'witsServer.properties'
    ext.softwarePath = '/hydrahome/[Username]/[Folder name]'
} else if(env == 'chpc') {
    apply from: 'deploy_chpc.gradle'
    ext.envProp = 'chpcServer.properties'
    ext.softwarePath = '/home/[Username]/[Folder name]'
} else if(env == 'azure') {
    apply from: 'deploy_azure.gradle'
    ext.envProp = 'azure.properties'
    ext.softwarePath = '/home/ivanjericevich/run'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    version = '1.0'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.+'
    }
}


task cleanDeploy() << {
    File deploy = new File(rootProject.projectDir.absolutePath + '/deploy')
    if (deploy.exists()) {
        delete deploy
    }

    deploy.mkdirs()

    File aeron = new File('/dev/shm/aeron')
    if (aeron.exists()) {
        delete aeron
    }
}

task copyScriptsToDeploy() << {
    File scripts = new File(rootProject.projectDir.absolutePath + '/deploy/scripts')
    if(scripts.exists()){
        scripts.delete()
    }

    scripts.mkdirs()

    copy {
        from rootProject.projectDir.absolutePath + '/scripts'
        into rootProject.projectDir.absolutePath + '/deploy/scripts'

        def myProps = new Properties()
        file(rootProject.projectDir.absolutePath + '/' + project.envProp).withInputStream {
            myProps.load(it);
        }
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: myProps)
    }
}

task copyWebToDeploy() << {
    File web = new File(rootProject.projectDir.absolutePath + '/deploy/Web')
    if(web.exists()){
        web.delete()
    }

    web.mkdirs()

    copy {
        from project(':Web').buildDir.absolutePath + '/libs'
        into rootProject.projectDir.absolutePath + '/deploy/Web'
    }
}

task copyToDeploy() << {
    project.subprojects.each { proj ->
        copy{
            from proj.buildDir.absolutePath + '/install/'
            into 'deploy'
        }
    }

    copy {
        from rootProject.projectDir.absolutePath + '/data'
        into rootProject.projectDir.absolutePath + '/deploy/data'
    }
}

copyToDeploy.dependsOn cleanDeploy
copyToDeploy.dependsOn copyScriptsToDeploy
copyToDeploy.dependsOn copyWebToDeploy
